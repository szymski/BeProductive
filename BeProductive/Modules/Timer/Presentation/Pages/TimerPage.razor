@page "/timer"
@using BeProductive.Modules.Timer.Infrastructure
@using BeProductive.Modules.Timer.Presentation.Components
@using Blazored.LocalStorage
@using BeProductive.Modules.Goals.Domain.Services
@using DateHelper=BeProductive.Modules.Common.Helpers.DateHelper
@using BeProductive.Modules.Goals.Domain
@inject TimerService TimerService
@inject AudioService AudioService
@inject GoalDomainService GoalDomainService
@inject ILocalStorageService LocalStorage
@inject HtmlNotificationService NotificationService
@implements IDisposable
@{
    Layout.Title = "Pomodoro timer";
}

<GoalSelectModal @ref="_goalSelectModal" OnGoalSelect="OnGoalSelect"/>

<div class="timer-wrapper">
    <Card BodyStyle="display: flex; flex-direction: column" Style="background: transparent; border: none">
        <Body>
            @{
                var showGoal = _state == TimerState.Stopped || Goal is not null;
            }
            <div style="margin: 0 auto 1rem;">
                @if (Goal is not null)
                {
                    <Button Class="selected-goal"
                            Type="@ButtonType.Text"
                            Size="@ButtonSize.Large"
                            Disabled=@(_state != TimerState.Stopped)
                            OnClick="() => _goalSelectModal.Open()">
                        @Goal.Name
                    </Button>
                }
                else
                {
                    <Button Type="@ButtonType.Default" OnClick="() => _goalSelectModal.Open()" Style=@(showGoal ? "" : "opacity: 0; pointer-events: none")>Choose goal</Button>
                }
            </div>
            <div class="timer-progress-container">
                <Progress Class="progress" Type="@ProgressType.Circle" Percent="@PercentDone" Width="200"/>
                <div class="timer-inside">
                    @{
                        var spanToDisplay = _state == TimerState.Stopped ? _duration : _timeLeft;
                    }
                    <div class=@($"timer {(spanToDisplay.TotalHours >= 1 ? "timer--small" : "")}")>
                        @if (_state == TimerState.Stopped)
                        {
                            <div>
                                @FormatDuration(spanToDisplay)
                            </div>
                            <div class="timer-buttons">
                                <Button Size="@AntSizeLDSType.Small" Icon="@IconType.Outline.Minus" Shape="@ButtonShape.Circle" OnClick=@(() => AddDuration(-1))></Button>
                                <Button Size="@AntSizeLDSType.Small" Icon="@IconType.Outline.Plus" Shape="@ButtonShape.Circle" OnClick=@(() => AddDuration(1))></Button>
                            </div>
                        }
                        else
                        {
                            @FormatDuration(spanToDisplay)
                        }
                    </div>
                </div>
            </div>
            <div class="buttons">
                <Space>
                    <SpaceItem>
                        @if (_state == TimerState.Stopped)
                        {
                            <Tooltip Title=@("Start") Placement="Placement.Bottom">
                                @* TODO: Using key to update button color, can't change at runtime. Maybe report a bug. *@
                                <Button Type="@ButtonType.Primary" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.CaretRight" Color=@(Color.Green7) Size="@ButtonSize.Large" OnClick="OnStartClick"></Button>
                            </Tooltip>
                        }
                        else if (_state == TimerState.Running)
                        {
                            <Tooltip Title=@("Pause") Placement="Placement.Bottom">
                                <Button Type="@ButtonType.Default" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Pause" Size="@ButtonSize.Large" OnClick="OnPauseClick"></Button>
                            </Tooltip>
                        }
                        else if (_state == TimerState.Paused)
                        {
                            <Tooltip Title=@("Resume") Placement="Placement.Bottom">
                                <Button Type="@ButtonType.Default" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.CaretRight" Color=@(Color.Green7) Size="@ButtonSize.Large" OnClick="OnStartClick"></Button>
                            </Tooltip>
                        }
                    </SpaceItem>
                    <SpaceItem>
                        <Tooltip Title=@("Reset") Placement="Placement.Bottom">
                            <Button Type="@ButtonType.Primary" Danger Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Sync" Size="@ButtonSize.Large" Disabled=@(_state != TimerState.Paused) OnClick="OnResetClick"></Button>
                        </Tooltip>
                    </SpaceItem>
                </Space>
            </div>
            <div class="buttons">
                <LottieWrapper @ref="_animation" Path="/animations/645-success.json" RemoveOnFinish="false" Size="100%">
                    <div style="width: 200px; height: 200px"></div>
                </LottieWrapper>
            </div>
        </Body>
    </Card>
</div>


@code {

        private const string LocalStorageDurationKey = "timer_duration";

    enum TimerState {
        Stopped,
        Running,
        Paused,
    }

    private GoalSelectModal? _goalSelectModal;
    private LottieWrapper? _animation;

    private TimerState _state = TimerState.Stopped;

    private Goal? Goal
    {
        get => TimerService.SelectedGoal;
        set => TimerService.SelectedGoal = value;
    }

    private TimeSpan _duration = TimeSpan.FromMinutes(5);
    private TimeSpan _timeLeft = TimeSpan.Zero;

    private string FormatDuration(TimeSpan duration)
        => duration.ToString(duration.TotalHours >= 1 ? "hh\\:mm\\:ss" : "mm\\:ss");

    private float FractionLeft => (float)Math.Clamp(Math.Floor(_timeLeft.Add(TimeSpan.FromSeconds(0)).TotalSeconds) / _duration.TotalSeconds, 0, 1);
    private float PercentDone => _state == TimerState.Stopped ? -1f : (1f - FractionLeft) * 100f;

    protected override async Task OnInitializedAsync()
    {
        _state = TimerService.IsRunning ? TimerState.Running : TimerState.Stopped;
        _timeLeft = TimerService.RemainingTime;

        TimerService.TimerTick += OnTimerTick;
        TimerService.TimerFinished += OnTimerFinished;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _duration = await LocalStorage.GetItemAsync<TimeSpan>(LocalStorageDurationKey);
                StateHasChanged();

            }
            catch
            {
    // ignored
            }

            await NotificationService.RequestPermissions();
        }
    }

    private async Task AddDuration(int scale)
    {
        var span = (_duration + TimeSpan.FromSeconds(scale)) switch {
        { TotalMinutes: < 1 }  => TimeSpan.FromSeconds(10),
        { TotalMinutes: < 5 } => TimeSpan.FromMinutes(1),
        { TotalMinutes: < 60 } => TimeSpan.FromMinutes(5),
            _ => TimeSpan.FromMinutes(30)
            };

        _duration = _duration.Add(span * scale);
        if (_duration < TimeSpan.FromSeconds(10))
        {
            _duration = TimeSpan.FromSeconds(10);
        }

        await LocalStorage.SetItemAsync(LocalStorageDurationKey, _duration);
    }

    private async Task OnStartClick()
    {
        if (_state == TimerState.Stopped)
        {
            await AudioService.PlaySoundEffect(SoundEffect.TimerStart);
            _timeLeft = _duration;
            TimerService.Start(_duration);
        }
        else if (_state == TimerState.Paused)
        {
            await AudioService.PlaySoundEffect(SoundEffect.TimerResume);
            TimerService.Start(_timeLeft);
        }

        _state = TimerState.Running;
    }

    private async Task OnPauseClick()
    {
        _state = TimerState.Paused;
        TimerService.Stop();
        await AudioService.PlaySoundEffect(SoundEffect.TimerPause);
    }

    private async Task OnResetClick()
    {
        _state = TimerState.Stopped;
        TimerService.Stop();
        await AudioService.PlaySoundEffect(SoundEffect.TimerPause);
    }

    private void OnTimerTick(object? sender, EventArgs e)
    {
        _timeLeft = TimerService.RemainingTime;
        InvokeAsync(StateHasChanged);
    }


    private void OnTimerFinished(object? sender, EventArgs e)
    {
        _timeLeft = TimeSpan.Zero;
        _state = TimerState.Stopped;
        InvokeAsync(StateHasChanged);

        if (Goal is not null)
        {
            _animation!.Play();
            InvokeAsync(AddSuccessStateForGoal);

            _ = NotificationService.Show("Time is up!", $"Your goal '{Goal.Name}' has been marked as success today!");
        }
        else
        {
            _ = NotificationService.Show("Time is up!", $"Let's take a break now.");
        }
    }

    private async Task AddSuccessStateForGoal()
    {
        await GoalDomainService.SetStateForDay(Goal!, DateOnly.FromDateTime(DateTime.Today), GoalState.Success);
    }

    private void OnGoalSelect(Goal? goal)
    {
        Goal = goal;
    }

    public void Dispose()
    {
        TimerService.TimerTick -= OnTimerTick;
        TimerService.TimerFinished -= OnTimerFinished;
    }

}