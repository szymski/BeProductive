@using BeProductive.Modules.Goals.Domain
@using Serilog
@inject GoalService GoalService

@* TODO: Better scrollbar *@

<Modal Title="Select goal"
       OnCancel="() => _visible = false"
       Visible="@_visible"
       Footer="RenderFooter()"
       Centered
       BodyStyle="padding: 0">
    @{
        var i = 0;
    }
    <Loader Loading="@(!_goals.Any())">
        <AntList DataSource="@_goals" Style="overflow: auto; max-height: 50vh; min-height: 200px">
            <ChildContent Context="item">
                <div class="content">
                    @if (item is null)
                    {
                        <ListItem Class="goal-item" OnClick="() => SelectGoal(null)">
                            <Space Class="space">
                                <SpaceItem>
                                </SpaceItem>
                                <SpaceItem Style="width: 100%; text-align: center">
                                    <Text Strong Style="font-size: 16px">
                                        None
                                    </Text>
                                </SpaceItem>
                            </Space>
                        </ListItem>
                    }
                    else
                    {
                        var (goal, state) = item;
                        <ListItem Class="goal-item" OnClick="() => SelectGoal(goal)">
                            <Space Class="space">
                                <SpaceItem>
                                    @if (string.IsNullOrEmpty(goal.Icon))
                                    {
                                        <Avatar Size="large" Style=@($"background: {goal.Color}")/>
                                    }
                                    else
                                    {
                                        <Avatar Size="large"
                                                Style=@($"color: {goal.Color}; background: transparent; font-size: 32px")
                                                Icon="@goal.Icon"/>
                                    }
                                </SpaceItem>
                                <SpaceItem Style="width: 100%; text-align: center">
                                    <Text Class=@($"goal-text--{state.ToString().ToLower()}") Strong Style=@($"font-size: 16px; animation-delay: {i++ * -200}ms")>
                                        @goal.Name
                                    </Text>
                                </SpaceItem>
                            </Space>
                        </ListItem>
                    }
                </div>
            </ChildContent>
        </AntList>
    </Loader>
</Modal>

@code {

    private RenderFragment RenderFooter()
        => @<Button Type="@ButtonType.Default" OnClick=@(() => _visible = false)>Cancel</Button>;

}

@code {

    record GoalItem(Goal Goal, GoalState State);

    private bool _visible = false;

    private List<GoalItem?> _goals = new();
    private Dictionary<Goal, GoalDayState> _goalLastStates = new();

    [Parameter]
    public EventCallback<Goal?> OnGoalSelect { get; set; }

    public void Open()
    {
        _visible = true;
        StateHasChanged();
        InvokeAsync(LoadGoals);
    }

    private async Task LoadGoals()
    {
        var goals = await GoalService.GetGoals();
        var states = await GoalService
            .GetManyGoalsStatesForDay(goals, DateOnly.FromDateTime(DateTime.Today));
        _goals = states
            .Select(pair => new GoalItem(pair.Key, pair.Value?.State ?? GoalState.Unknown))
            .OrderBy(item => GoalStateOrders[item.State])
            .Cast<GoalItem?>()
            .ToList();
        _goals.Insert(0, null);
        StateHasChanged();
    }

    private async Task SelectGoal(Goal goal)
    {
        _visible = false;
        await OnGoalSelect.InvokeAsync(goal);
    }

    public static readonly Dictionary<GoalState, int> GoalStateOrders = new()
    {
        {
            GoalState.Unknown, 0
        },
        {
            GoalState.Emergency, 1
        },
        {
            GoalState.Failure, 2
        },
        {
            GoalState.Success, 3
        },
    };

}