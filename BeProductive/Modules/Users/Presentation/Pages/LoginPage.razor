@page "/login"
@using Microsoft.AspNetCore.Identity
@using BeProductive.Modules.Users.Domain
@using System.Text.Json
@using System.Security.Claims
@using BeProductive.Modules.Users.Infrastructure
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.Extensions.Options
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHostEnvironmentAuthenticationStateProvider HostAuthentication
@inject IOptionsMonitor<CookieAuthenticationOptions> CookieAuthenticationOptionsMonitor
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@{
    Layout.Title = "Login";
}

<Text Strong>@_status</Text>
<br>
<Button OnClick="OnLoginClick">Login</Button>
<Button OnClick="OnLogoutClick">Logout</Button>

<Card Style="width: 300px">
    <Form Model="@_loginFormModel" OnFinish="SignIn">
        <FormItem>
            <Input @bind-Value="@context.Login" Placeholder="Login"/>
        </FormItem>
        <FormItem>
            <Input @bind-Value="@context.Password" Type="password" Placeholder="Password"/>
        </FormItem>
        <Button Block Type="@ButtonType.Primary" HtmlType="submit">Login</Button>
    </Form>
</Card>

@code {

    public class LoginFormModel
    {
        public string Login { get; set; } = "";
        public string Password { get; set; } = "";
    }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private string _status = "Loading...";

    private LoginFormModel _loginFormModel = new();

    protected override async Task OnParametersSetAsync()
    {
        var state = await AuthenticationState;
        _status = JsonSerializer.Serialize(state.User.Identity, new JsonSerializerOptions { WriteIndented = true });
    }

    private async Task OnLoginClick()
    {
        var user = await UserManager.FindByNameAsync("user");

        await AuthService.Login(user);
    }

    private async Task OnLogoutClick()
    {
        await AuthService.Logout();
    }

    private async Task SignIn()
    {
        var success = await AuthService.SignIn(_loginFormModel.Login, _loginFormModel.Password);
        if (success)
        {
            NotificationService.Success("Logged in successfully");
        }
        else
        {
            NotificationService.Error("Login failed");
        }
    }

}