@inject AuthService AuthService
@inject UserService UserService
@page "/account"
@using BeProductive.Modules.Users.Infrastructure.Data
@using BeProductive.Modules.Users.Domain
@using Serilog
@{
    Layout.Title = "Account";
}

<div>
    <Card>
        <Body>
            <Descriptions Class="descriptions" Column="1">
                <Upload
                    Action="/api/Avatar"
                    Class="upload"
                    Name="file"
                    ShowUploadList="false"
                    OnChange="OnAvatarUpload"
                    OnCompleted="OnAvatarUploadComplete">
                    <div class="avatar-upload">
                        <Avatar Size="large" Style="width: 128px; height: 128px; font-size: 128px;" Icon="user" Src="/api/Avatar"/>
                        <Icon Class="icon2" Type="@IconType.Outline.Upload" Width="32" Height="32"/>
                    </div>
                </Upload>

                <DescriptionsItem Title="User ID">@_authData.UserId</DescriptionsItem>
                <DescriptionsItem Title="Username">
                    <EditableText Text="@_username" TextChanged="OnUsernameChanged"/>
                </DescriptionsItem>
                <DescriptionsItem Title="Password">
                    <EditableText Text="******" InitialText="" InputType="password" Placeholder="Change password" MinLength="3" TextChanged="@OnPasswordChanged"/>
                </DescriptionsItem>
                <DescriptionsItem Title="Date joined">@_user?.CreatedAt.ToString("g")</DescriptionsItem>
                <DescriptionsItem Title="Last login">@_user?.LastSignedInAt.ToString("g")</DescriptionsItem>
            </Descriptions>
        </Body>
    </Card>
</div>

@code {

    private User? _user;
    private AuthData? _authData;

    private string _username = "";

    protected override async Task OnInitializedAsync()
    {
        _authData = await AuthService.GetAuthDataAsync();
        _user = await UserService.GetUserById(_authData.UserId);
        _username = _authData.Username;
    }

    private async Task OnUsernameChanged(string value)
    {
        try
        {
            await UserService.ChangeUsername(value);
            _username = value;
            NotificationService.Success("Username changed successfully!");
        }
        catch (Exception e)
        {
            Log.Error(e, "Failed to change username");
            NotificationService.Error(e.Message);
        }
    }

    private async Task OnPasswordChanged(string value)
    {
        try
        {
            await UserService.ChangePassword(value);
            NotificationService.Success("Password changed successfully!");
        }
        catch (Exception e)
        {
            Log.Error(e, "Failed to change password");
            NotificationService.Error(e.Message);
        }
    }

    private async Task OnAvatarUpload(UploadInfo upload)
    {
        if (!upload.File.IsPicture())
        {
            _ = NotificationService.Error("Only images are allowed!");
            return;
        }
        
        _ = NotificationService.Info("Uploading avatar...");
    }

    private async Task OnAvatarUploadComplete(UploadInfo upload)
    {
        
    }

}