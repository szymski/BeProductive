@inject AuthService AuthService
@inject UserService UserService
@page "/account"
@using BeProductive.Modules.Users.Infrastructure.Data
@using BeProductive.Modules.Users.Domain
@using Serilog
@{
    Layout.Title = "Account";
}

@* TODO: Looks like shit on mobile devices *@

<Card>
    <Body>
        <Row Class="row" Gutter="(16, 2)">
            <Col Span="4" Flex=@("auto")>
                <Avatar Size="large" Style="width: 72px; height: 72px; font-size: 72px" Icon="user"/>
            </Col>
            <Col Span="20"/>
            <Col Span="4">
                User ID
            </Col>
            <Col Span="20">
                @_authData?.UserId
            </Col>
            <Col Span="4">
                Username
            </Col>
            <Col Span="20">
                <EditableText Text="@_username" TextChanged="@OnUsernameChanged"/>
            </Col>
            <Col Span="4">
                Password
            </Col>
            <Col Span="20">
                <EditableText Text="******" InitialText="" InputType="password" Placeholder="Change password" MinLength="3" TextChanged="@OnPasswordChanged"/>
            </Col>
            <Col Span="4">
                Date joined
            </Col>
            <Col Span="20">
                @_user?.CreatedAt.ToString("g")
            </Col>
            <Col Span="4">
                Last login
            </Col>
            <Col Span="20">
                @_user?.LastSignedInAt.ToString("g")
            </Col>
        </Row>
    </Body>
</Card>

<style>
    .row {
        font-size: 22px;
    }
    
    .ant-row .ant-col {
        margin: auto;
    }
    
    .ant-row .ant-col:nth-child(2n+1) {
      /*background: red;*/
      text-align: right;
    }
    
    .ant-row .ant-col:nth-child(2n) {
      /*background: orange;*/
      text-align: left;
    }
    
    .ant-col {
        /*border: 1px solid red;*/
    }
</style>

@code {

    private User? _user;
    private AuthData? _authData;

    private string _username = "";

    protected override async Task OnInitializedAsync()
    {
        _authData = await AuthService.GetAuthDataAsync();
        _user = await UserService.GetUserById(_authData.UserId);
        _username = _authData.Username;
    }

    private async Task OnUsernameChanged(string value)
    {
        try
        {
            await UserService.ChangeUsername(value);
            _username = value;
            NotificationService.Success("Username changed successfully!");
        }
        catch (Exception e)
        {
            Log.Error(e, "Failed to change username");
            NotificationService.Error(e.Message);
        }
    }

    private async Task OnPasswordChanged(string value)
    {
        try
        {
            await UserService.ChangePassword(value);
            NotificationService.Success("Password changed successfully!");
        }
        catch (Exception e)
        {
            Log.Error(e, "Failed to change password");
            NotificationService.Error(e.Message);
        }
    }

}