@using Serilog
@implements IAsyncDisposable
@inject IJSRuntime JS

<div style="position: relative; display: inline-block">
    <div @ref="_container" style="width: @Size; height: @Size; position: absolute; top: 50%; bottom: 50%; left: 50%; margin: auto; transform: translate(-50%, 0); pointer-events: none; @Style"></div>
    @ChildContent(this)
</div>

@code {

    private ElementReference _container;

    [Parameter]
    public RenderFragment<LottieWrapper> ChildContent { get; set; }

    [Parameter]
    [EditorRequired]
    public string Path { get; set; }

    [Parameter]
    [EditorRequired]
    public string Size { get; set; } = "400%";

    [Parameter]
    [EditorRequired]
    public string Style { get; set; } = "";

    [Parameter]
    public bool RemoveOnFinish { get; set; } = true;

    private IJSObjectReference? _animation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _animation ??= await JS.InvokeAsync<IJSObjectReference>("LoadAnimation", Path, _container);
    }

    public async void Play()
    {
        await _animation!.InvokeVoidAsync("playShot", RemoveOnFinish);
    }

    public async ValueTask DisposeAsync()
    {
        _animation?.InvokeVoidAsync("destroy");
    }

}