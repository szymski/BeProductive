@using Bogus

@if (_rituals.Count == 0 && !_addingNew)
{
    <Empty Description=@("You have no ritual steps. Add the first step by clicking the button below.")/>
}

<Dropzone Items="@_rituals" DragEnd="OnDragEnd">
    <RitualListEntry
        @key="context.Id"
        Title="@context.Title"
        Number="@(context.Order + 1)"
        OnChangesSaved="title => UpdateEntry(context, title)"
        OnRemoved="() => RemoveEntry(context)"/>
</Dropzone>

@if (_addingNew)
{
    <RitualListEntry
        Adding
        OnChangesSaved="AddNewEntry"
        OnEditCancelled="CancelEditing"/>
}
else
{
    <div>
        <Button Size="large" Block Type="@ButtonType.Text" Icon="@IconType.Outline.Plus" @onclick="StartAddingEntry">
            Add step
        </Button>
    </div>
    @if (HostEnvironment.IsDevelopment())
    {
        <div>
            <Button Size="large" Block Type="@ButtonType.Text" Icon="@IconType.Outline.Thunderbolt" @onclick="SeedEntry">
                Seed
            </Button>
        </div>
    }
}

@code {

    [Parameter]
    public RitualType Type { get; set; }

    private List<Ritual> _rituals = new();

    private bool _addingNew = false;

    protected override async Task OnInitializedAsync()
    {
        var rituals = await RitualDomainService.GetRituals(Type);
        _rituals = rituals.ToList();
        await ReorderEntries();
    }

    private async Task ReorderEntries()
    {
        var previousOrder = _rituals.Select(ritual => ritual.Order).ToArray();

        _rituals.ForEach((ritual, i) => ritual.Order = i);
        var currentOrder = _rituals.Select(ritual => ritual.Order).ToArray();

        if (!previousOrder.SequenceEqual(currentOrder))
        {
            Console.WriteLine("Order differs, updating");
            var ritualOrders = _rituals
                .Select((ritual, i) => new KeyValuePair<Ritual, int>(ritual, i));
            await RitualDomainService.UpdateOrders(ritualOrders);
        }
    }

    private async Task UpdateEntry(Ritual ritual, string newTitle)
    {
        var oldTitle = ritual.Title;

        try
        {
            ritual.Title = newTitle;
            await RitualDomainService.UpdateRitual(ritual);
            NotificationService.Success($"Step has been updated");
        }
        catch (Exception e)
        {
            ritual.Title = oldTitle;
            throw e;
        }
    }

    private async Task RemoveEntry(Ritual ritual)
    {
        await RitualDomainService.RemoveRitual(ritual);
        _rituals.Remove(ritual);
        await ReorderEntries();

        NotificationService.Success($"Removed {ritual.Type.ToString().ToLower()} ritual step ({ritual.Title})");
    }

    private void StartAddingEntry()
    {
        _addingNew = true;
    }

    private void CancelEditing()
    {
        _addingNew = false;
    }

    private async Task AddNewEntry(string title)
    {
        _addingNew = false;

        var ritual = await RitualDomainService.AddRitual(new()
        {
            Title = title,
            Type = Type,
            Order = _rituals.Count,
        });
        _rituals.Add(ritual);

        NotificationService.Success($"Added new {ritual.Type.ToString().ToLower()} ritual step");
    }

    private async void OnDragEnd(Ritual _)
    {
        Console.WriteLine($"Drag End {DateTime.Now}");
        await ReorderEntries();
    }

    private async Task SeedEntry()
    {
        var faker = new Bogus.DataSets.Name("pl");
        var ritual = await RitualDomainService.AddRitual(new()
        {
            Title = faker.FullName(),
            Type = Type,
            Order = _rituals.Count,
        });
        _rituals.Add(ritual);
    }

}