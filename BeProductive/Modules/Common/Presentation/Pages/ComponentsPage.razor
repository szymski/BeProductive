@page "/components"
@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Presentation.Models
@using DateHelper=BeProductive.Modules.Common.Helpers.DateHelper
@inject IJSRuntime JS

@{
    Layout.Title = "Components preview";
}

<Divider Orientation="left">Color picker</Divider>
<ColorPicker/>

<Divider Orientation="left">Icon picker</Divider>
<IconPicker Color="#5a1"/>

<Divider Orientation="left">Goal state selector</Divider>
<Space>
    <SpaceItem>
        <GoalStateSelector/>
    </SpaceItem>
    <SpaceItem>
        <GoalStateSelector State="GoalState.Success"/>
    </SpaceItem>
    <SpaceItem>
        <GoalStateSelector State="GoalState.Failure"/>
    </SpaceItem>
    <SpaceItem>
        <GoalStateSelector State="GoalState.Emergency"/>
    </SpaceItem>
    <SpaceItem>
        <GoalStateSelector State="GoalState.NotApplicable"/>
    </SpaceItem>
</Space>

<Divider Orientation="left">Goal calendar</Divider>
<div style="width: 380px">
    <GoalCalendar DayStates="@_dayStates" OnGoalStateChanged="Callback"/>
</div>

<Divider Orientation="left">Icons</Divider>

<div class="test">

</div>

<br>
<br>
<br>

<LottieWrapper Path="/animations/7598-particle-explosion.json">
    <Button Type="@ButtonType.Primary" style="width: 64px; height: 64px; margin: auto; z-index: 2" @onclick="@(() => context.Play())">Play!</Button>
</LottieWrapper>

<style> 
    .timer-inside {
        position: relative;
        width: 64px;
        height: 64px;
        background: white;
        border: 1px solid #3e99ea;
        overflow: hidden;
    }
    
    .timer-inside::after {
        position: absolute;
        inset: 0;
        bottom: unset;
        height: 100%;
        background: linear-gradient(to bottom, #77be1c, #a0e52f, #4da11d);
        content: "";
        animation: 1.5s anim 1 ease-out;
    }
    
    @@keyframes anim {
        from {
            top: 100%;
        }
        to {
            top: 0;
        }
    }
</style>


@code {

    private readonly List<DayState> _dayStates = new()
    {
        new(DateTime.Today.AddDays(-2), GoalState.Success),
        new(DateTime.Today.AddDays(-3), GoalState.Failure),
        new(DateTime.Today.AddDays(1), GoalState.Emergency)
    };

    private void Callback((DateTime date, GoalState state) args)
    {
        var (date, state) = args;
        _dayStates.RemoveAll(state => DateHelper.IsSameDay(state.Day, DateOnly.FromDateTime(date)));
        if (state != GoalState.Unknown)
        {
            _dayStates.Add(new(date, state));
        }
    }

}