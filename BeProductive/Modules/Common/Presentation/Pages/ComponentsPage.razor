@page "/components"
@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Presentation.Models
@using DateHelper = BeProductive.Modules.Common.Helpers.DateHelper

@{
    Layout.Title = "Components preview";
}

<Divider Orientation="left">Color picker</Divider>
<ColorPicker/>

<Divider Orientation="left">Icon picker</Divider>
<IconPicker Color="#5a1"/>

<Divider Orientation="left">Goal state selector</Divider>
<Space>
    <SpaceItem>
        <GoalStateSelector/>
    </SpaceItem>
    <SpaceItem>
        <GoalStateSelector State="GoalState.Success"/>
    </SpaceItem>
    <SpaceItem>
        <GoalStateSelector State="GoalState.Failure"/>
    </SpaceItem>
    <SpaceItem>
        <GoalStateSelector State="GoalState.Emergency"/>
    </SpaceItem>
</Space>

<Divider Orientation="left">Goal calendar</Divider>
<div style="width: 380px">
    <GoalCalendar DayStates="@_dayStates" OnGoalStateChanged="Callback"/>
</div>

@code {

    private readonly List<DayState> _dayStates = new()
    {
        new(DateTime.Today.AddDays(-2), GoalState.Success),
        new(DateTime.Today.AddDays(-3), GoalState.Failure),
        new(DateTime.Today.AddDays(1), GoalState.Emergency)
    };

    private void Callback((DateTime date, GoalState state) args)
    {
        var (date, state) = args;
        _dayStates.RemoveAll(state => DateHelper.IsSameDay(state.Day, DateOnly.FromDateTime(date)));
        if (state != GoalState.Unknown)
        {
            _dayStates.Add(new(date, state));
        }
    }

}