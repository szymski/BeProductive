@implements IDisposable

@if (!string.IsNullOrEmpty(_title))
{
    <PageHeader Class=@($"page-header {(string.IsNullOrEmpty(Layout.Title) ? "hidden" : "")}") Title="@_title" Subtitle="@_subtitle">
        <TitleTemplate>
            <Button
                Class="menu-button"
                Type="@ButtonType.Text"
                Size="@ButtonSize.Large"
                Shape="@ButtonShape.Circle"
                Icon="@(_showBackButton ? IconType.Outline.ArrowLeft : IconType.Outline.MenuUnfold)"
                OnClick="OnButtonClick"/>
            @_title
        </TitleTemplate>
    </PageHeader>
    <PageTitle>@Layout.Title - beProductive</PageTitle>
}
else
{
    <PageTitle>beProductive</PageTitle>
}


@* TODO: Separate file *@
<style>
    .page-header {
        margin-top: 0;
        transition: margin-top 0.3s ease-in-out;
    }

    .page-header.hidden {
        margin-top: -72px;
    }
    
    .menu-button {
        display: none;
        margin-right: 0.25rem;
    }
    
    .menu-button .anticon {
        transform: scale(1.5);
    }
    
    @@media(max-width: 768px) {
        .menu-button {
            display: inline-block;
        }
        
        .page-header {
            padding-left: 16px;
            padding-right: 16px;
        }
    }
</style>

@code {

    private string _title = "";
    private string _subtitle = "";
    private bool _showBackButton = false;

    [CascadingParameter]
    public AuthenticationState AuthenticationState { get; set; }

    [Parameter]
    public EventCallback OnMenuClicked { get; set; }

    public event Action? OnBackButtonClicked;

    protected override void OnInitialized()
    {
        Layout.OnUpdate += OnUpdate;
        NavigationManager.LocationChanged += OnNavigation;
    }

    private void OnNavigation(object? sender, LocationChangedEventArgs e)
    {
    }

    private void OnUpdate()
    {
        if (!string.IsNullOrEmpty(Layout.Title))
        {
            _title = Layout.Title ?? "";
            _subtitle = Layout.Subtitle ?? "";
            _showBackButton = Layout.ShowBackButton;
        }
        InvokeAsync(StateHasChanged);
    }

    private Task OnButtonClick()
    {
        if (_showBackButton)
        {
            OnBackButtonClicked?.Invoke();
            return Task.CompletedTask;
        }
        else
        {
            return OnMenuClicked.InvokeAsync();
        }
    }

    public void Dispose()
    {
        Layout.OnUpdate -= OnUpdate;
        NavigationManager.LocationChanged -= OnNavigation;
    }

}