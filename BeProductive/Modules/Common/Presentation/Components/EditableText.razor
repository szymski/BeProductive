@if (!Editing)
{
    <div style="display: inline-flex; align-items: center">
        <Text @attributes="@Attributes">
            @Text
        </Text>
        <Button
            Class="editable-text-button"
            Shape="@ButtonShape.Circle"
            Icon="@IconType.Outline.Edit"
            Size="@AntSizeLDSType.Default"
            Type="@ButtonType.Link"
            Style=@($"margin-left: 2px; margin-bottom: -4px; {@EditButtonStyle}")
            @onclick="StartEditing"/>
    </div>
}
else
{
    <Space Style="@WrapperStyle" Size="@AntSizeLDSType.Small">
        <SpaceItem Style="flex: 1">
            <Input
                Style="@InputStyle"
                Placeholder="@Placeholder"
                Disabled="@Loading"
                type="@InputType"
                @bind-Value="@_editText"
                autofocus
                @onkeyup="OnInputKeyPress"/>
        </SpaceItem>
        <SpaceItem>
            <Button
                Shape="@ButtonShape.CircleOutline"
                Icon="@IconType.Outline.Check"
                Type="@ButtonType.Primary"
                Disabled="@(!IsValid)"
                Loading="@Loading"
                @onclick="Save"/>
        </SpaceItem>
        @if (ShowDeleteButton)
        {
            <SpaceItem>
                <Button
                    Shape="@ButtonShape.CircleOutline"
                    Icon="@IconType.Outline.Delete"
                    Type="@ButtonType.Default"
                    disabled="@Loading"
                    Danger
                    Style="@DeleteButtonStyle"
                    @onclick="Delete"/>
            </SpaceItem>
        }
        <SpaceItem>
            <Button
                Shape="@ButtonShape.CircleOutline"
                Icon="@IconType.Outline.Close"
                Type="@ButtonType.Default"
                disabled="@Loading"
                @onclick="Cancel"/>
        </SpaceItem>
    </Space>
}

@code {

    [Parameter]
    public string Text { get; set; } = "";
    
    [Parameter]
    public string? InitialText { get; set; }

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public EventCallback OnCancelled { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public int MinLength { get; set; } = 0;

    [Parameter]
    public int MaxLength { get; set; } = int.MaxValue;

    [Parameter]
    public string Placeholder { get; set; } = "Enter title";

    [Parameter]
    public string InputStyle { get; set; } = "";

    [Parameter]
    public string WrapperStyle { get; set; } = "";

    [Parameter]
    public string EditButtonStyle { get; set; } = "";

    [Parameter]
    public string DeleteButtonStyle { get; set; } = "";
    
    [Parameter]
    public string InputType { get; set; } = "";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    private string? _editText = "";

    private bool IsValid
        => _editText is not null &&
           _editText.Length >= MinLength && _editText.Length <= MaxLength;

    private async Task OnInputKeyPress(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
                await Save();
                break;
            case "Escape":
                await Cancel();
                break;
        }
    }

    private void StartEditing()
    {
        _editText = InitialText ?? Text;
        Editing = true;
    }

    private async Task Save()
    {
        if (Loading || !IsValid) return;

        if (_editText == Text)
        {
            Editing = false;
            return;
        }

        Loading = true;
        Text = _editText!;

        try
        {
            await TextChanged.InvokeAsync(_editText);
        }
        finally
        {
            Editing = false;
            Loading = false;
        }
    }

    private async Task Cancel()
    {
        if (Loading) return;
        Editing = false;
        await OnCancelled.InvokeAsync();
    }

    private async Task Delete()
    {
        if (Loading) return;
        await OnDelete.InvokeAsync();
        Editing = false;
    }

}