@if (!Editing)
{
    <RenderFragment>
        <Text @attributes="@Attributes">
            @Text
        </Text>
        <Button
            Class="editable-text-button"
            Shape="@ButtonShape.Circle"
            Icon="@IconType.Outline.Edit"
            Size="@AntSizeLDSType.Small"
            Type="@ButtonType.Link"
            @onclick="StartEditing"/>
    </RenderFragment>
}
else
{
    <Input
        Style="width: 500px"
        Placeholder="Enter title"
        Disabled="@Loading"
        @bind-Value="@_editText"
        autofocus
        @onkeyup="OnInputKeyPress"/>
    <Button
        Shape="@ButtonShape.CircleOutline"
        Icon="@IconType.Outline.Check"
        Type="@ButtonType.Primary"
        Disabled="@(!IsValid)"
        Loading="@Loading"
        @onclick="Save"/>
    <Button
        Shape="@ButtonShape.CircleOutline"
        Icon="@IconType.Outline.Close"
        Type="@ButtonType.Default"
        disabled="@Loading"
        @onclick="Cancel"/>
}

@code {

    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public EventCallback OnCancelled { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public int MinLength { get; set; } = 0;

    [Parameter]
    public int MaxLength { get; set; } = int.MaxValue;

    private string? _editText = "";

    private bool IsValid
        => _editText is not null &&
            _editText.Length >= MinLength && _editText.Length <= MaxLength;

    private async Task OnInputKeyPress(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
                await Save();
                break;
            case "Escape":
                await Cancel();
                break;
        }
    }

    private void StartEditing()
    {
        _editText = Text;
        Editing = true;
    }

    private async Task Save()
    {
        if (Loading || !IsValid) return;

        if (_editText == Text)
        {
            Editing = false;
            return;
        }

        Loading = true;
        Text = _editText!;

        try
        {
            await TextChanged.InvokeAsync(_editText);
        }
        finally
        {
            Editing = false;
            Loading = false;
        }
    }

    private async Task Cancel()
    {
        if (Loading) return;
        Editing = false;
        await OnCancelled.InvokeAsync();
    }

}