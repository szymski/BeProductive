@using System.Security.Principal
@using BeProductive.Modules.Settings.Presentation.Components
@inject AuthService AuthService
@implements IDisposable

<SettingsDrawer @ref="_settingsDrawer"/>

<Sider Width="200" Style="overflow: auto; height: 100vh; position: fixed; left: 0">
    <div class="sidebar">
        <div class="logo">
            <h1>beProductive</h1>
        </div>
        <Menu Class="menu" Mode="@MenuMode.Inline">
            @foreach (var (name, route) in _items)
            {
                <MenuItem RouterLink="@route" RouterMatch="NavLinkMatch.Prefix" Title="@name"/>
            }
        </Menu>
        <div class="footer">
            <div>
                @if (_userIdentity is not null)
                {
                    <Popover @ref="_popover" Trigger="new[] { Trigger.Click }">
                        <ContentTemplate>
                            <Space Direction="DirectionVHType.Vertical" Align="center" Size=@("0")>
                                <SpaceItem Style="width: 100%">
                                    <Button Block Type="@ButtonType.Text" OnClick="OnSettingsClick">Settings</Button>
                                </SpaceItem>
                                <SpaceItem Style="width: 100%">
                                    <Button Block Type="@ButtonType.Text" Danger OnClick="OnLogoutClick">Logout</Button>
                                </SpaceItem>
                            </Space>
                        </ContentTemplate>
                        <ChildContent>
                            <a style="display: flex; align-items: center; justify-content: center; padding: 0.2rem;">
                                <Avatar Style="background: #278dff" Icon="user" Size="small"/>
                                <Text Strong Style="margin-left: 5px; font-size: 16px; margin-bottom: 2px">@_userIdentity.Name</Text>
                            </a>
                        </ChildContent>
                    </Popover>
                }
                else
                {
                    <Text>Not logged in</Text>
                }
            </div>
            <Text Type="@TextElementType.Secondary">@_version</Text>
        </div>
    </div>
</Sider>

@code {

    private Popover _popover;
    private SettingsDrawer _settingsDrawer;

    private string _version = "";

    record MenuItem(string Name, string Route);

    private List<MenuItem> _items = new()
    {
        new("Goals", "/"),
        new("Rituals", "/rituals"),
        new("About", "/about"),
        new("To do", "/todo"),
        new("Components", "/components"),
    };

    private IIdentity? _userIdentity;


    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        _version = $"v{ThisAssembly.Info.Version} ({ThisAssembly.Info.Configuration})";

        _userIdentity = await AuthService.GetAuthState();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task OnLogoutClick()
    {
        await AuthService.Logout();
    }

    private void OnSettingsClick()
    {
        _settingsDrawer.Open();
        _popover.Close();
    }

}