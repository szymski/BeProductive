@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Domain.Services
@using BeProductive.Modules.Goals.Presentation.Pages
@* @inject GoalDomainService GoalDomainService *@

<div Class="@(Selected ? "selected" : "")" @onclick="OnClick">
    <Dropdown Trigger="new Trigger[] { Trigger.ContextMenu }" Style="width: 100%">
        <Overlay>
            <Menu>
                <MenuItem OnClick="NavigateToEditGoalPage">Edit</MenuItem>
                <MenuItem >
                    <DeletePopconfirm OnDelete="DeleteGoal">
                        <Text Type="@TextElementType.Danger">Delete</Text>
                    </DeletePopconfirm>
                </MenuItem>
            </Menu>
        </Overlay>
        <ChildContent>
            <Card Class="card" Bordered="true" Size="small" Hoverable>
                <Space Style="width: 100%">
                    <SpaceItem>
                        @if (string.IsNullOrEmpty(Goal.Icon))
                        {
                            <Avatar Size="large" Style=@($"background: {@Goal.Color}")/>
                        }
                        else
                        {
                            <Avatar Size="large" Style=@($"color: {@Goal.Color}; background: transparent; font-size: 36px") Icon="@Goal.Icon"/>
                        }
                    </SpaceItem>
                    <SpaceItem>
                        <Text Strong Style="font-size: 18px">
                            @Goal.Name
                        </Text>
                        @* <Text Disabled>@Goal.Id</Text> *@
                        @* <Text Strong >@GoalContext.Goal.Id</Text> *@
                    </SpaceItem>
                    <SpaceItem Style="float: right; margin-left: auto;">
                        <ContextGoalStateSelector/>
                    </SpaceItem>
                </Space>
            </Card>
        </ChildContent>
    </Dropdown>
</div>


@code {

    [CascadingParameter]
    public Goal Goal { get; set; }

    [CascadingParameter]
    public GoalContext GoalContext { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    // [CascadingParameter(Name = nameof(GoalDetails))]
    // public GoalDetails? GoalDetails { get; set; }

    // TODO
    // private async Task OnGoalStateUpdated()
    // {
    //     await GoalDetails?.UpdateStates();
    // }

    private void NavigateToEditGoalPage()
    {
        NavigationManager.NavigateTo($"/goal/{Goal.Id}/edit");
    }

    private async Task DeleteGoal()
    {
        if (Goal.IsSystem)
        {
            NotificationService.Error("System goals cannot be deleted");
            return;
        }
        
        await GoalService.DeleteGoal(Goal);
        NotificationService.Success("The goal has been deleted");
    }

}