@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Domain.Services
@using BeProductive.Modules.GoalExtensions.EmergencyGoal.Infrastructure
@inject GoalDomainService GoalDomainService

<GoalStateSelector
    State="@State"
    Text="@_day.DayOfWeek.ToString()[..3].ToUpper()"
    Date="@_day.ToDateTime(TimeOnly.MinValue)"
    IsToday="@_isToday"
    HasEmergencyGoal="@Goal.HasEmergencyGoal()"
    StateChanged="OnGoalStateChanged"/>

@code {

    [CascadingParameter]
    public Goal Goal { get; set; }

    [CascadingParameter]
    public GoalContext GoalContext { get; set; }

    private GoalState State { get; set; } = GoalState.Unknown;

    private DateOnly _day = DateOnly.FromDateTime(DateTime.Today);

    private bool _isToday = true;

    protected override async Task OnInitializedAsync()
    {
        GoalContext.GoalStateChanged += OnGoalStateChangedExternally;
        await GetLastDay();
    }

    private void OnGoalStateChangedExternally(object? sender, (DateOnly date, GoalState state) args)
    {
        var (date, state) = args;

        if (date != _day || state != State)
        {
            Console.WriteLine($"External Change ({Goal}): {args.date}, {args.state}");
            InvokeAsync(async () =>
            {
                await GetLastDay();
                StateHasChanged();
            });
        }
    }

    private async Task GetLastDay()
    {
        var lastState = await GoalService.GetLastDayState(Goal);
        if (lastState is not null)
        {
            UpdateDayUsingLastDay(lastState);
        }
        else
        {
            State = GoalState.Unknown;
        }

        _isToday = DateHelper.IsSameDay(DateTime.Now, _day.ToDateTime(TimeOnly.MinValue));
    }

    private void UpdateDayUsingLastDay(GoalDayState lastState)
    {
        _day = lastState.Day.AddDays(1);
        var afterToday = _day > DateOnly.FromDateTime(DateTime.Today);
        if (afterToday)
        {
            _day = DateOnly.FromDateTime(DateTime.Today);

            var isSameDay = DateHelper.IsSameDay(DateTime.Today, lastState.Day.ToDateTime(TimeOnly.MinValue));
            State = isSameDay ? lastState.State : GoalState.Unknown;
        }
        else
        {
            State = GoalState.Unknown;
        }
    }

    private async Task OnGoalStateChanged(GoalState state)
    {
        State = state;
        await GoalContext.SetGoalState(_day, state);
        await GetLastDay();
    }

}