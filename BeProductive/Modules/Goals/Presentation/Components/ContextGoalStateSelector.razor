@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Domain.Services
@implements IDisposable
@inject GoalDomainService GoalDomainService

<GoalStateSelector State="@State" StateChanged="OnGoalStateChanged" Text="@_day.DayOfWeek.ToString()[..3].ToUpper()"/>

@code {

    [Parameter]
    public Goal Goal { get; set; }

    [Parameter]
    public EventCallback OnStateUpdated { get; set; }

    [CascadingParameter(Name = nameof(GoalDetails))]
    public GoalDetails? GoalDetails
    {
        get => _goalDetails;
        set
        {
            if (value is null && _goalDetails is not null)
            {
                _goalDetails.OnGoalStateChanged -= OnGoalStateChangedExternally;
            }

            _goalDetails = value;
            if (_goalDetails is not null)
            {
                _goalDetails.OnGoalStateChanged -= OnGoalStateChangedExternally;
                _goalDetails.OnGoalStateChanged += OnGoalStateChangedExternally;
            }
        }
    }

    private GoalDetails? _goalDetails;

    private GoalState State { get; set; } = GoalState.Unknown;

    private DateOnly _day = DateOnly.FromDateTime(DateTime.Today);

    protected override async Task OnParametersSetAsync()
    {
        await GetLastDay();
    }

    private void OnGoalStateChangedExternally(object? sender, (DateTime date, GoalState state) e)
    {
        Console.WriteLine($"External Change ({Goal}): {e.date}, {e.state}");
        InvokeAsync(async () =>
        {
            await GetLastDay();
            StateHasChanged();
        });
    }

    private async Task GetLastDay()
    {
        var lastState = await GoalService.GetLastDayState(Goal);
        if (lastState is not null)
        {
            UpdateDayUsingLastDay(lastState);
        }
        else
        {
            State = GoalState.Unknown;
        }
    }

    private void UpdateDayUsingLastDay(GoalDayState lastState)
    {
        _day = lastState.Day.AddDays(1);
        var afterToday = _day > DateOnly.FromDateTime(DateTime.Today);
        if (afterToday)
        {
            _day = DateOnly.FromDateTime(DateTime.Today);
            State = lastState.State;
        }
        else
        {
            State = GoalState.Unknown;
        }
    }

    private async Task OnGoalStateChanged(GoalState state)
    {
        var wasChanged = await GoalDomainService.SetStateForDay(Goal, _day, state);
        if (wasChanged)
        {
            NotificationService.Success($"State changed to {state}");
            await OnStateUpdated.InvokeAsync();
        }

        await GetLastDay();
    }

    public void Dispose()
    {
        if (GoalDetails is not null)
        {
            GoalDetails.OnGoalStateChanged -= OnGoalStateChangedExternally;
        }
    }

}