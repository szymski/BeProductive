@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Presentation.Models

<div style="text-align: center; background: white">
    <Calendar
        @ref="_calendar"
        FullScreen="false"
        DateCellRender="DateCellRender"
        OnChange="DateChanged"
        Value="@Date"/>

    <Space Style="margin-bottom: 1rem; display: flex">
        @RenderButton(IconType.Outline.Left, () => AddMonth(-1))
        <SpaceItem Style="width: 100%">
            @Date.ToString("MMMM")
        </SpaceItem>
        @RenderButton(IconType.Outline.Right, () => AddMonth(1))
    </Space>
</div>

@code {

    private RenderFragment RenderButton(string icon, Func<Task> callback)
    {
        return (
            @<SpaceItem>
                <Button Type="@ButtonType.Default" Shape="@ButtonShape.CircleOutline" Icon="@icon" OnClick="@callback"/>
            </SpaceItem>
            );
    }

}

@* @code { *@
@* *@
@*     private RenderFragment HeaderRender(CalendarHeaderRenderArgs arg) *@
@*     { *@
@*         return @<CascadingValue Value="@_calendar" Name="Calendar"> *@
@*                    <CascadingValue Value=@("ant-picker-calendar") Name="PrefixCls"> *@
@*                        <Space Style=""> *@
@*                            <SpaceItem> *@
@*                                <Button Type="@ButtonType.Default" Shape="@ButtonShape.CircleOutline" Icon="@IconType.Outline.Left"/> *@
@*                            </SpaceItem> *@
@*                            <SpaceItem> *@
@*                                <Button Type="@ButtonType.Default" Shape="@ButtonShape.CircleOutline" Icon="@IconType.Outline.Right"/> *@
@*                            </SpaceItem> *@
@*                        </Space> *@
@*                        <CalendarHeader/> *@
@*                    </CascadingValue> *@
@*                </CascadingValue>; *@
@*     } *@
@* *@
@* } *@


@code {

    [Parameter]
    public IEnumerable<DayState> DayStates { get; set; } = Enumerable.Empty<DayState>();
    
    [Parameter]
    public DateTime Date { get; set; } = DateTime.Today;

    [Parameter]
    public EventCallback<DateTime> OnMonthChanged { get; set; }

    [Parameter]
    public EventCallback<(DateTime date, GoalState state)> OnGoalStateChanged { get; set; }

    private Calendar _calendar;

    private RenderFragment DateCellRender(DateTime datetime)
    {
        if (!DateHelper.IsSameMonth(datetime, Date))
        {
            return @<RenderFragment/>;
        }

        var date = DateOnly.FromDateTime(datetime);

        var dayState = DayStates.SingleOrDefault(dayState => dayState.Day == date);

        return (
            @<Popover
                 Trigger=@(new Trigger[] { Trigger.Focus, Trigger.Hover })
                 Placement="Placement.Bottom"
                 Style="position: absolute; inset: 0">
                <ChildContent>
                    <div style="position: absolute; inset: 0; z-index: 2"></div>
                    <div style="width: 100%; height: 100%; background: @GoalStateToColor(dayState?.State ?? GoalState.Unknown); z-index: -1; border-radius: 50%">
                    </div>
                </ChildContent>
                <ContentTemplate>
                    <GoalStatePopoverContent
                        Date="@datetime"
                        State="@(dayState?.State ?? GoalState.Unknown)"
                        OnStateButtonClick="state => OnGoalStateChanged.InvokeAsync((datetime, state))"/>
                </ContentTemplate>
            </Popover>
            );
    }

    private static string GoalStateToColor(GoalState state)
        => state switch
        {
            GoalState.Success => "#44aa35",
            GoalState.Failure => "#ee3542",
            GoalState.Emergency => "#fa9a44",
            _ => "transparent"
            };

    private async Task AddMonth(int direction)
    {
        var newDate = Date.AddMonths(direction);
        await DateChanged(newDate);
    }

    private async Task DateChanged(DateTime date)
    {
        var isSameMonth = DateHelper.IsSameMonth(date, Date);
        Date = date;

        if (!isSameMonth)
        {
            await OnMonthChanged.InvokeAsync(date);
        }
    }

}