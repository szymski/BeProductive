@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Presentation.Models

<Calendar
    FullScreen="false"
    DateCellRender="DateCellRender"
    OnChange="DateChanged"
    Value="@_date"/>

@code {

    [Parameter]
    public IEnumerable<DayState> DayStates { get; set; } = Enumerable.Empty<DayState>();

    [Parameter]
    public EventCallback<DateTime> OnMonthChanged { get; set; }

    [Parameter]
    public EventCallback<(DateTime date, GoalState state)> OnGoalStateChanged { get; set; }

    private DateTime _date = DateTime.Today;

    private RenderFragment DateCellRender(DateTime datetime)
    {
        var date = DateOnly.FromDateTime(datetime);

        var dayState = DayStates.SingleOrDefault(dayState => dayState.Day == date);

        return (
            @<Popover
                 Trigger=@(new Trigger[] { Trigger.Focus, Trigger.Hover })
                 Placement="Placement.Bottom"
                 Style="position: absolute; inset: 0">
                <ChildContent>
                    <div style="position: absolute; inset: 0; z-index: 2"></div>
                    <div style="width: 100%; height: 100%; background: @GoalStateToColor(dayState?.State ?? GoalState.Unknown); z-index: -1; border-radius: 50%">
                    </div>
                </ChildContent>
                <ContentTemplate>
                    <GoalStatePopoverContent
                        State="@(dayState?.State ?? GoalState.Unknown)"
                        OnStateButtonClick="state => OnGoalStateChanged.InvokeAsync((datetime, state))"/>
                </ContentTemplate>
            </Popover>
            );
    }

    private static string GoalStateToColor(GoalState state)
        => state switch
        {
            GoalState.Success => "#44aa35",
            GoalState.Failure => "#ee3542",
            GoalState.Emergency => "#fa9a44",
            _ => "transparent"
            };

    private async Task DateChanged(DateTime date)
    {
        var isSameMonth = DateHelper.IsSameMonth(date, _date);
        _date = date;

        if (!isSameMonth)
        {
            await OnMonthChanged.InvokeAsync(date);
        }
    }

}