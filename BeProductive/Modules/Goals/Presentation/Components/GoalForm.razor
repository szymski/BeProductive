@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Presentation.Models
@using BeProductive.Modules.Goals.Presentation.Pages
@using Serilog
@inject IJSRuntime JS

<div>
    <PageHeader BackIcon="true" Class="header">
        <PageHeaderTitle>
            @(Type == GoalFormType.New ? "Add goal" : $"Edit goal{(GoalName != null ? $" - {GoalName}" : "")}")
        </PageHeaderTitle>
        <PageHeaderContent>
            <Form Model="@Value" OnFinish="@OnFinished">
                <FormItem Label="Name">
                    <Input @bind-Value="@context.Name"/>
                </FormItem>
                <FormItem Style="align-items: center" Label="Color">
                    <ColorPicker @bind-Value="@context.Color"/>
                </FormItem>
                <FormItem Style="align-items: center" Label="Icon">
                    <IconPicker @bind-Value="@context.Icon" Color="@context.Color"/>
                </FormItem>

                <FormItem>
                    <Collapse DefaultActiveKey="@(new[] { "1" })">
                        <Panel Header="Specific days only" Key="1">
                            <CheckboxGroup @bind-Value="Days" Class="checkbox-group" Options="@_dayOptions" OnChange="OnDayChanged"/>
                        </Panel>
                    </Collapse>
                </FormItem>

                @if (Type == GoalFormType.New)
                {
                    <Button Block Type="@ButtonType.Primary" HtmlType="submit">Add goal</Button>
                }
                else if (Type == GoalFormType.Edit)
                {
                    <Space Style="width: 100%">
                        <SpaceItem>
                            @if (IsSystem)
                            {
                                <RenderFragment>
                                    <Text Disabled>This is a system goal. It cannot be deleted.</Text>
                                </RenderFragment>
                            }
                            else
                            {
                                <Popconfirm Title="This cannot be undone!"
                                            OnConfirm="OnDeleted"
                                            OkText="Delete"
                                            OkButtonProps="@(new ButtonProps() { Danger = true })"
                                            CancelText="Cancel"
                                            CancelButtonProps="@(new ButtonProps() { Type = "text" })"
                                            Placement="Placement.Bottom">
                                    <Button Danger Type="@ButtonType.Primary">Delete</Button>
                                </Popconfirm>
                            }
                        </SpaceItem>
                        <SpaceItem Style="margin-left: auto">
                            <Button Type="@ButtonType.Default" OnClick=@(() => JS.InvokeVoidAsync("history.back"))>Cancel</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Type="@ButtonType.Primary" HtmlType="submit">Save</Button>
                        </SpaceItem>
                    </Space>
                }
            </Form>
        </PageHeaderContent>
    </PageHeader>
</div>

@code {

    public enum GoalFormType {
        New,
        Edit,
    }

    [Parameter]
    public GoalFormType Type { get; set; }

    [Parameter]
    public string? GoalName { get; set; }

    [Parameter]
    public bool IsSystem { get; set; } = false;

    [Parameter]
    public GoalModel Value { get; set; }

    [Parameter]
    public EventCallback OnFinished { get; set; }

    [Parameter]
    public EventCallback OnDeleted { get; set; }

    private CheckboxOption[] _dayOptions =
    {
        new()
        {
            Value = "all", Label = "Everyday"
        },
        new()
        {
            Value = "monday", Label = "Monday"
        },
        new()
        {
            Value = "tuesday", Label = "Tuesday"
        },
        new()
        {
            Value = "wednesday", Label = "Wednesday"
        },
        new()
        {
            Value = "thursday", Label = "Thursday"
        },
        new()
        {
            Value = "friday", Label = "Friday"
        },
        new()
        {
            Value = "saturday", Label = "Saturday"
        },
        new()
        {
            Value = "sunday", Label = "Sunday"
        },
    };

    private string[] _days =
    {
    };

    private string[] Days
    {
        get => _days;
        set { }
    }

    protected override void OnInitialized()
    {
        _days = ConvertDayEnumToStringDays(Value.AllowedDaysOfWeek);
    }

    private void OnDayChanged(string[] values)
    {
        var daysOfWeek = _dayOptions[1..].Select(option => option.Value);

        if (_days.Contains("all") && !values.Contains("all"))
        {
            _days = new string[]
            {
            };
        }
        else
        {
            var selectedAllDays = daysOfWeek.All(values.Contains) || (values.Contains("all") && !_days.Contains("all"));
            if (selectedAllDays)
            {
                _days = daysOfWeek.Concat(new[]
                {
                    "all"
                }).ToArray();
            }
            else
            {
                _days = values.Where(day => day != "all").ToArray();
            }
        }

        Value.AllowedDaysOfWeek = ConvertDayListToEnum(_days);
    }

    private AllowedDaysOfWeek ConvertDayListToEnum(IEnumerable<string> days) =>
        days.Select(day => Enum.Parse<AllowedDaysOfWeek>(day, true))
            .Aggregate(AllowedDaysOfWeek.None, (current, next) => current | next);

    private string[] ConvertDayEnumToStringDays(AllowedDaysOfWeek value)
    {
        var days = Enum.GetValues<AllowedDaysOfWeek>()
            .Where(day => value.HasFlag(day))
            .Select(day => day.ToString().ToLower())
            .ToList();

        var allDays = _dayOptions[1..].Select(option => option.Value);
        if (allDays.All(day => days.Contains(day)))
        {
            days.Add("all");
        }

        return days.ToArray();
    }

}