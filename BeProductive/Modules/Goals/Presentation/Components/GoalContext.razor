@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Domain.Services
@using Serilog
@inject GoalDomainService GoalDomainService
@inject GoalStatsService GoalStatsService
@inject AudioService AudioService

<CascadingValue Value="this">
    <CascadingValue Value="Goal">
        @ChildContent
    </CascadingValue>
</CascadingValue>

@code {

    [Parameter]
    public Goal Goal { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public GoalStateSelector? StateSelector { get; set; }

    public event EventHandler<(DateOnly date, GoalState state)> GoalStateChanged;

    public async Task SetGoalState(DateOnly date, GoalState state)
    {
        try
        {
            var streakTask = GoalStatsService.GetCurrentStreak(Goal);
            var wasChanged = await GoalDomainService.SetStateForDay(Goal, date, state);
            if (wasChanged)
            {
                var soundEffect = GoalStateToSoundEffect(state);
                await AudioService.PlaySoundEffect(soundEffect);
                var streak = await streakTask;
                PlayAnimations(state, streak);

                NotificationService.Success($"State changed to {state} for {date}");
                NotifyGoalStateChanged(date, state);
            }
            else
            {
                await AudioService.PlaySoundEffect(SoundEffect.Cancel);
            }
        }
        catch (Exception e)
        {
            NotificationService.Error($"Failed to change state to {state} for {date}");
            throw e;
        }
    }
    private void PlayAnimations(GoalState newState, int streak)
    {
        if (newState == GoalState.Success)
        {
            switch (streak)
            {
                case >= 4:
                    StateSelector?.PlaySuccessAnimation2();
                    break;
                case >= 1:
                    StateSelector?.PlaySuccessAnimation();
                    break;
            }
        }
    }

    public void NotifyGoalStateChanged(DateOnly date, GoalState state)
    {
        GoalStateChanged?.Invoke(this, (date, state));
    }

    private static SoundEffect GoalStateToSoundEffect(GoalState state)
        => state switch
        {
            GoalState.Unknown => SoundEffect.SelectGoalUncheck,
            GoalState.Success => SoundEffect.SelectGoalSuccess,
            GoalState.Failure => SoundEffect.SelectGoalFailure,
            GoalState.Emergency => SoundEffect.SelectGoalEmergency,
            GoalState.NotApplicable => SoundEffect.SelectGoalNotApplicable,
            _ => throw new ArgumentOutOfRangeException(nameof(state), state, null)
            };

}