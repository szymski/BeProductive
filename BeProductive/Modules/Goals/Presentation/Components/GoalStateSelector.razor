@using BeProductive.Modules.Goals.Domain
@using Microsoft.AspNetCore.Mvc.Razor

<div>
    <Popover
        @ref="_popover"
        Trigger=@(new Trigger[] { Trigger.Click })
        Placement="Placement.Left">
        <ChildContent>
            <Button
                Class=@($"goal-state-selector {StateToClass(State)} {(IsToday ? "" : "waiting")}")
                Type="@ButtonType.Default"
                OnClick="args => _popover.OnClickDiv(args)"
                OnClickStopPropagation>
                @Text
            </Button>
        </ChildContent>
        <ContentTemplate>
            <GoalStatePopoverContent
                Date="@Date"
                State="@State"
                HasEmergencyGoal="@HasEmergencyGoal"
                OnStateButtonClick="OnStateButtonClick"/>
        </ContentTemplate>
    </Popover>
</div>

@code {

    private RenderFragment StateButton(GoalState state, string name, Color color, string type = ButtonType.Primary) =>
        @<SpaceItem>
            <Button
                Block
                Type="@type"
                Color="@color"
                OnClick="() => OnStateButtonClick(state)">
                @name
            </Button>
        </SpaceItem>;

}

@code {

    private Popover _popover;

    [Parameter]
    public DateTime Date { get; set; } = DateTime.Today;

    [Parameter]
    public GoalState State { get; set; }

    [Parameter]
    public EventCallback<GoalState> StateChanged { get; set; }

    [Parameter]
    public string Text { get; set; } = "MON";

    [Parameter]
    public bool IsToday { get; set; } = true;

    [Parameter]
    public bool HasEmergencyGoal { get; set; }

    private async Task OnStateButtonClick(GoalState state)
    {
        State = state;
        await _popover.Close();
        await StateChanged.InvokeAsync(state);
    }

    private static string StateToClass(GoalState state)
        => state switch
        {
            GoalState.Unknown => "unknown",
            GoalState.Success => "success",
            GoalState.Failure => "failure",
            GoalState.Emergency => "emergency",
            _ => "error"
            };

}