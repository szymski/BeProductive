@using BeProductive.Modules.Goals.Presentation.Models
@using BeProductive.Modules.Goals.Domain
@using BeProductive.Modules.Goals.Domain.Services
@using Microsoft.EntityFrameworkCore
@using BeProductive.Modules.GoalExtensions.EmergencyGoal.Infrastructure
@using BeProductive.Modules.GoalExtensions.EmergencyGoal.Presentation.Components
@using BeProductive.Modules.GoalExtensions.Description.Presentation.Components
@using BeProductive.Modules.Rituals.Domain
@inject GoalService GoalService

<div class="goal-details">
    <Card Class="card" Style="display: flex; flex-direction: column;" BodyStyle="padding: 0; flex: 1;">
        <TitleTemplate>
            @Goal.Name
        </TitleTemplate>
        <Extra>
            <a @onclick="NavigateToEditGoalPage">Edit</a>
        </Extra>
        <Body>
            <Card Size="@AntSizeLDSType.Small" Style="border-bottom: none">
                <GoalCalendar
                    DayStates="_dayStates"
                    HasEmergencyGoal="@Goal.HasEmergencyGoal()"
                    OnMonthChanged="OnMonthChanged"
                    OnGoalStateChanged="GoalStateChanged"
                    AllowedDaysOfWeek="@Goal.AllowedDaysOfWeek"/>
            </Card>

            <ErrorBoundary>
                <ChildContent>
                    <GoalStatsDetails/>
                    <GoalDescriptionDetails/>
                    <EmergencyGoalDetails/>
                </ChildContent>
                <ErrorContent>
                    <ErrorDisplay Exception="@context"/>
                </ErrorContent>
            </ErrorBoundary>
        </Body>
        <ActionTemplate>
            @if (Goal is { SystemType: RitualGoalTypes.MorningRitual or RitualGoalTypes.EveningRitual })
            {
                var type = (Goal.SystemType == RitualGoalTypes.MorningRitual ? "morning" : "evening");

                <div style="display: block; text-align: center">
                    <a href=@($"/rituals/{type}")>
                        <Text Strong Style="font-size: 16px; color: #278dff">Go to @type ritual</Text>
                    </a>
                </div>
            }
        </ActionTemplate>
    </Card>
</div>

<style>
    .collapse {
        background: transparent;
        border: none;
    }
</style>

@code {

    private int _lastGoalId = 0;

    [CascadingParameter]
    public GoalContext GoalContext
    {
        get => _goalContext!;
        set
        {
            if (_goalContext is not null)
            {
                _goalContext.GoalStateChanged -= OnGoalStateChangedExternally;
            }
            _goalContext = value;
            if (_goalContext is not null)
            {
                _goalContext.GoalStateChanged += OnGoalStateChangedExternally;
            }
        }
    }

    private GoalContext? _goalContext;

    [CascadingParameter]
    public Goal Goal { get; set; }

    private DateTime _date = DateTime.Today;

    private IEnumerable<DayState> _dayStates;

    private bool _isUpdatingStates;

    protected override async Task OnParametersSetAsync()
    {
        if (Goal.Id != _lastGoalId)
        {
            _dayStates = Enumerable.Empty<DayState>();
            await UpdateStates();
            _lastGoalId = Goal.Id;
        }
    }

    public async Task UpdateStates()
    {
        if (_isUpdatingStates) return;

        _isUpdatingStates = true;

        try
        {
            var domainStates = await GoalService.GetStatesForMonth(Goal, _date);
            var states = domainStates.Select(DayState.FromDomain).ToArray();

            _dayStates = states;

            StateHasChanged();
        }
        finally
        {
            _isUpdatingStates = false;
        }
    }

    private void NavigateToEditGoalPage()
    {
        NavigationManager.NavigateTo($"/goal/{Goal.Id}/edit");
    }

    private async Task OnMonthChanged(DateTime date)
    {
        _date = date;
        await UpdateStates();
    }

    private async Task GoalStateChanged((DateTime date, GoalState state) args)
    {
        var (date, state) = args;
        await GoalContext.SetGoalState(DateOnly.FromDateTime(date), state);
    // await GoalDomainService.SetStateForDay(Goal, DateOnly.FromDateTime(date), state);
    // await UpdateStates();
    // OnGoalStateChanged?.Invoke(this, args);
    }

    private void OnGoalStateChangedExternally(object? sender, (DateOnly date, GoalState state) e)
    {
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine($"OnGoalStateChangedExternally ({GoalContext.Goal.Id}): {GoalContext}");
        Console.ResetColor();

        InvokeAsync(UpdateStates);
    }

}