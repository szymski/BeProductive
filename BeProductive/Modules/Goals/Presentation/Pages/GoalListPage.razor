@page "/"
@page "/goal"
@using Microsoft.AspNetCore.WebUtilities
@using BeProductive.Modules.Goals.Domain
@using BlazorPro.BlazorSize
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject GoalService GoalService
@implements IDisposable
@{
    Layout.Title = "Goals";
}

<PageTitle>Goal list</PageTitle>

<div style="display: flex; min-height: 100%">
    <Layout Style="min-height: 100%">
        <Content Class=@($"list-content {(SelectedGoal is not null ? "list-content--goal-selected" : "")}")>
            @if (_goals.Count == 0)
            {
                <Empty Description=@("You have no goals defined. Add the first one by clicking the button below.")/>
            }

            <Dropzone Items="_goals" DragEnd="DragEnd">
                <GoalContext @key="@context" @ref="@context.Context" Goal="@context.Goal">
                    <GoalListEntry
                        OnClick="() => OpenGoalDetails(context.Context)"
                        Selected="@(context == SelectedGoal)"/>
                </GoalContext>
            </Dropzone>

            <div>
                <Button Size="large" Block Type="@ButtonType.Link" Icon="@IconType.Outline.Plus" @onclick="NavigateToAddGoal">
                    Add goal
                </Button>
            </div>

            @if (HostEnvironment.IsDevelopment())
            {
                <div>
                    <Button Size="large" Block Type="@ButtonType.Link" Icon="@IconType.Outline.Thunderbolt" OnClick="SeedGoal">
                        Seed
                    </Button>
                </div>
            }
        </Content>

        <Sider Class="sider" Width="400" CollapsedWidth="0" Collapsed="@_isDetailsCollapsed">
            @if (SelectedGoal is not null)
            {
                @if (_isSmall)
                {
                    Layout.Title = "Goal details";
                    Layout.ShowBackButton = true;

                    @*
                    <div style="margin-bottom: 0.5rem">
                        <GoalContext Goal="@SelectedGoal.Goal">
                            <GoalListEntry/>
                        </GoalContext>
                    </div>
                    *@

                    <div style="margin-bottom: 0.5rem">
                        <CascadingValue Value="@SelectedGoal.Context">
                            <CascadingValue Value="@SelectedGoal.Goal">
                                <GoalListEntry/>
                            </CascadingValue>
                        </CascadingValue>
                    </div>
                }

                <CascadingValue Value="@SelectedGoal.Context">
                    <CascadingValue Value="@SelectedGoal.Goal">
                        <GoalDetails @ref="@_goalDetails"/>
                    </CascadingValue>
                </CascadingValue>
            }
        </Sider>
    </Layout>
</div>

<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="_isSmall"/>

@* TODO: Move to scoped css *@
<style>
    .ant-layout-sider {
        overflow: hidden !important;
    }
    
    .ant-layout-sider.ant-layout-sider-collapsed {
        margin-left: 0 !important;
        
    }
</style>

@code {

    private record GoalEntry(Goal Goal, GoalContext? Context = null) {
        public GoalContext? Context { get; set; } = Context;
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? GoalId { get; set; }

    [CascadingParameter]
    public ContextPageHeader PageHeader { get; set; }

    private GoalEntry? SelectedGoal { get; set; }

    private GoalDetails? _goalDetails;

    private List<GoalEntry> _goals = new();

    private bool _isDetailsCollapsed = true;
    private bool _isSmall = false;

    protected override async Task OnInitializedAsync()
    {
        _goals = (await GoalService.GetGoals())
            .Select(goal => new GoalEntry(goal))
            .ToList();

        PageHeader.OnBackButtonClicked += UnselectGoal;
    }

    protected override void OnParametersSet()
    {
        if (GoalId.HasValue)
        {
            SelectedGoal = _goals.SingleOrDefault(goal => goal.Goal.Id == GoalId);
            _isDetailsCollapsed = false;
        }
        else
        {
            SelectedGoal = null;
            _isDetailsCollapsed = true;
        }
    }

    private void UnselectGoal()
    {
        NavigationManager.NavigateTo(Url);
    }

    private void OpenGoalDetails(GoalContext context)
    {
        var url = NavigationManager.GetUriWithQueryParameter(nameof(GoalId), context.Goal.Id);
        NavigationManager.NavigateTo(url);
    }

    private void NavigateToAddGoal()
    {
        NavigationManager.NavigateTo("/add-goal");
    }

    private async Task SeedGoal()
    {
        var faker = new Bogus.DataSets.Commerce();

        var goal = await GoalService.AddGoal(new()
        {
            Color = GoalColors.RandomColor,
            Icon = GoalIcons.RandomIcon,
            Name = faker.Department(),
            Order = _goals.Count,
        });

        await OnInitializedAsync();
    }

    private async Task ReorderEntries()
    {
        var previousOrder = _goals.Select(entry => entry.Goal.Order).ToArray();

        _goals.ForEach((entry, i) => entry.Goal.Order = i);
        var currentOrder = _goals.Select(entry => entry.Goal.Order).ToArray();

        _goals.ForEach(Console.WriteLine);

        if (!previousOrder.SequenceEqual(currentOrder))
        {
            var goalOrders = _goals
                .Select((entry, i) => new KeyValuePair<Goal, int>(entry.Goal, i));
            await GoalService.UpdateOrders(goalOrders);
        }
    }

    private async void DragEnd(GoalEntry _)
    {
        await ReorderEntries();
    }

    public void Dispose()
    {
        PageHeader.OnBackButtonClicked -= UnselectGoal;
    }

}

@code
{

    public static string GetUrlWithSelectedGoal(Goal goal) =>
        QueryHelpers.AddQueryString("/", "GoalId", goal.Id.ToString());

    public static string Url => "/";

}