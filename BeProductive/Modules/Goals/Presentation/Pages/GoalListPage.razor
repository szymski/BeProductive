@page "/"
@page "/goal"
@using Microsoft.AspNetCore.WebUtilities
@using BeProductive.Modules.Goals.Domain
@inject NavigationManager NavigationManager
@inject GoalService GoalService

@{
    Layout.Title = "Goals";
}

<PageTitle>Goal list</PageTitle>

<Layout Style="min-height: 100%">
    <Content>
        @if (_goals.Count == 0)
        {
            <Empty Description=@("You have no goals defined. Add the first one by clicking the button below.")/>
        }

        <Dropzone Items="_goals" DragEnd="DragEnd">
            <GoalContext @key="@context" @ref="@context.Context" Goal="@context.Goal">
                <GoalListEntry
                    OnClick="() => OpenGoalDetails(context.Context)"
                    Selected="@(context == SelectedGoal)"/>
            </GoalContext>
        </Dropzone>

        <div>
            <Button Size="large" Block Type="@ButtonType.Link" Icon="@IconType.Outline.Plus" @onclick="NavigateToAddGoal">
                Add goal
            </Button>
        </div>

        @if (HostEnvironment.IsDevelopment())
        {
            <div>
                <Button Size="large" Block Type="@ButtonType.Link" Icon="@IconType.Outline.Thunderbolt" OnClick="SeedGoal">
                    Seed
                </Button>
            </div>
        }
    </Content>

    <Sider Style="margin-left: 1rem; background: transparent" Width="400" CollapsedWidth="0" Collapsed="@_isDetailsCollapsed">
        @if (SelectedGoal is not null)
        {
            <CascadingValue Value="@SelectedGoal.Context">
                <CascadingValue Value="@SelectedGoal.Goal">
                    <GoalDetails @ref="@_goalDetails"/>
                </CascadingValue>
            </CascadingValue>
        }
    </Sider>
</Layout>

@* TODO: Move to scoped css *@
<style>
    .ant-layout-sider {
        overflow: hidden !important;
    }
    
    .ant-layout-sider.ant-layout-sider-collapsed {
        margin-left: 0 !important;
        
    }
</style>

@code {

    private record GoalEntry(Goal Goal, GoalContext? Context = null) {
        public GoalContext? Context { get; set; } = Context;
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? GoalId { get; set; }

    private GoalEntry? SelectedGoal { get; set; }

    private GoalDetails? _goalDetails;

    private List<GoalEntry> _goals = new();

    private bool _isDetailsCollapsed = true;

    protected override async Task OnInitializedAsync()
    {
        _goals = (await GoalService.GetGoals())
            .Select(goal => new GoalEntry(goal))
            .ToList();
    }

    protected override void OnParametersSet()
    {
        if (GoalId.HasValue)
        {
            SelectedGoal = _goals.SingleOrDefault(goal => goal.Goal.Id == GoalId);
            _isDetailsCollapsed = false;
        }
        else
        {
            _isDetailsCollapsed = true;
        }
    }

    private void OpenGoalDetails(GoalContext context)
    {
        var url = NavigationManager.GetUriWithQueryParameter(nameof(GoalId), context.Goal.Id);
        NavigationManager.NavigateTo(url);
    }

    private void NavigateToAddGoal()
    {
        NavigationManager.NavigateTo("/add-goal");
    }

    private async Task SeedGoal()
    {
        var faker = new Bogus.DataSets.Commerce();

        var goal = await GoalService.AddGoal(new()
        {
            Color = GoalColors.RandomColor,
            Icon = GoalIcons.RandomIcon,
            Name = faker.Department(),
            Order = _goals.Count,
        });

        await OnInitializedAsync();
    }

    private async Task ReorderEntries()
    {
        var previousOrder = _goals.Select(entry => entry.Goal.Order).ToArray();

        _goals.ForEach((entry, i) => entry.Goal.Order = i);
        var currentOrder = _goals.Select(entry => entry.Goal.Order).ToArray();

        _goals.ForEach(Console.WriteLine);

        if (!previousOrder.SequenceEqual(currentOrder))
        {
            var goalOrders = _goals
                .Select((entry, i) => new KeyValuePair<Goal, int>(entry.Goal, i));
            await GoalService.UpdateOrders(goalOrders);
        }
    }

    private async void DragEnd(GoalEntry _)
    {
        await ReorderEntries();
    }

}

@code
{

    public static string GetUrlWithSelectedGoal(Goal goal) =>
        QueryHelpers.AddQueryString("/", "GoalId", goal.Id.ToString());

    public static string Url => "/";

}