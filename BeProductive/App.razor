@using BeProductive.Modules.Users.Presentation.Components
@using BeProductive.Modules.Users.Presentation.Layouts
@using BeProductive.Modules.Settings.Infrastructure
@using BlazorPro.BlazorSize
@implements IDisposable
@inject MessageService MessageService
@inject SettingsService SettingsService

<div data-theme="@_theme">
    <HeadContent>
        @if (SettingsService.IsDarkTheme)
        {
            <link href="_content/AntDesign/css/ant-design-blazor.dark.css" rel="stylesheet"/>
        }
        <meta name="theme-color" content=@(SettingsService.IsDarkTheme ? "#141414" : "#ffffff")/>
    </HeadContent>

    <MediaQueryList>
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized Context="state">
                    <Router AppAssembly="@typeof(App).Assembly">
                        <Found Context="routeData">
                            @* <RouteView RouteData="@routeData" IconLayout="@typeof(MainLayout)"/> *@
                            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                                <NotAuthorized>
                                    Not authorized
                                </NotAuthorized>
                            </AuthorizeRouteView>
                            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
                        </Found>
                        <NotFound>
                            <LayoutView Layout="@typeof(MainLayout)">
                                <NotFoundPage/>
                            </LayoutView>
                        </NotFound>
                    </Router>
                </Authorized>
                <NotAuthorized>
                    <LayoutView Layout="typeof(NotAuthorizedLayout)">
                        <LoginComponent/>
                    </LayoutView>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    </MediaQueryList>

    <AntContainer/>
</div>

@code {
    private string _theme;

    protected override void OnInitialized()
    {
        SettingsService.LoadCookiesSync();
        _theme = SettingsService.Theme;
        SettingsService.ThemeChanged += OnThemeChanged;
        _ = SettingsService.LoadSettings();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SettingsService.LoadSettings();
        }
    }

    private void OnThemeChanged(object? sender, string theme)
    {
        _theme = theme;
        StateHasChanged();
    }

    public void Dispose()
    {
        SettingsService.ThemeChanged -= OnThemeChanged;
    }

}