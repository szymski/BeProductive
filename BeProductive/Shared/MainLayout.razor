@using BeProductive.Modules.Settings.Presentation.Components
@inherits LayoutComponentBase
@implements IDisposable

<SettingsDrawer @ref="_settingsDrawer"/>

<CascadingValue Value="_settingsDrawer">
    <div class="layout">
        <Layout Style="min-height: 100%">
            <Sidebar @ref="_sidebar"/>

            <Layout Class="content-wrapper" Style="min-height: 100vh">
                <ContextPageHeader @ref="_pageHeader" OnMenuClicked="OnMenuClicked"/>

                <CascadingValue Value="@_pageHeader">
                    <Content Class="content">
                        @{
                            RenderFragment? body;
                        }
                        <ErrorBoundary @ref="_errorBoundary">
                            <ChildContent>
                                @Body
                            </ChildContent>
                            <ErrorContent Context="error">
                                <ErrorDisplay Exception="@error"/>
                                @Body
                            </ErrorContent>
                        </ErrorBoundary>
                    </Content>
                </CascadingValue>

                <Footer Class="layout-footer" style="box-sizing: border-box;">
                    <Text Disabled>Copyright Szymon Jankowski © @(DateTime.Today.Year)</Text>
                    <Button OnClick="@OpenSettings" Icon="@IconType.Fill.Setting" Shape="@ButtonShape.Circle" Style="margin-left: 0.5rem;"></Button>
                </Footer>
            </Layout>
        </Layout>
    </div>
</CascadingValue>

@code {

    private ContextPageHeader _pageHeader;
    private Sidebar _sidebar;
    private SettingsDrawer _settingsDrawer;
    private ErrorBoundary _errorBoundary;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        NotificationService.Config(new()
        {
            Top = 12,
        });
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _errorBoundary.Recover();
    }

    private void OpenSettings()
    {
        _settingsDrawer.Open();
    }

    private async Task OnMenuClicked()
    {
        _sidebar.ToggleMenu();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}